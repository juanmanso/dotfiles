"" Juan Manso's vimrc
"" NOTE: to refresh your vim instance, type ':so %'
"" REFERENCE: | vimrc | vimrc-intro |

"" ===========================================================================
"" TABLE OF CONTENTS
"" - Non-important configurations
"" - Basic built-in vim configs
""  - General configurations
""	- Numbering
""	- UTF encoding
""	- Fuzzy file search
""	- File browsing
""	- Tags configuration
""	- Snippets
"" - Plugins
"" - Plugin-specific configurations
""  - Airline
""  - Colors
""  - Markdown
"" ===========================================================================


"" ===========================================================================
""" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"" Uncomment the following to have Vim jump to the last position when
"" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

"" ===========================================================================
""" BASIC CONFIG
set nocompatible

"" Redefine <ESC> to the key next to the 1 on the MacBook Pro with touchbar
inoremap § <ESC>
nnoremap § <ESC>
cnoremap § <ESC>
noremap § <ESC>

"" Define <LEADER> to spacebar
let mapleader = ' '

if has("syntax") " Enable syntax highlighting
  syntax on
endif

if has("autocmd") " Load indentation rules and plugins
  filetype plugin indent on
endif

"" Other basic configuration
set showcmd		            " Show (partial) command in status line.
set showmatch		        " Show matching brackets.
set ruler		            " Show on the bottom right 'line,column  %'
"set ignorecase		         " Do case insensitive matching
"set smartcase		         " Do smart case matching
"set hlsearch                " Highlight all matches until new search
set incsearch		        " Incremental search while typing
"set autowrite		         " Automatically save be4 cmds like :next and :make
"set hidden		             " Hide buffers when they are abandoned
"set cursorline		         " Highlight the current line
set visualbell		        " Stop that ANNOYING beeping
set wildmenu		        " Display all matching files when we tab complete
set wildignore+=**/__pycache__/**,**/node_modules/**,**/_build/**
"set wildmode=list:longest,full
set autoread                " Auto read files changed outside vim
"set clipboard=unnamedplus   " Use the system clipboard
set colorcolumn=80          " Highlight max length column
set noswapfile              " Disable the swap file generation
set nostartofline           " When navigating, don't go to the start of the line
" set nowrap                  " Don't wrap text when screen width is narrower

"" Tab default settings
"" -> For consistency, set everything to the same value
set tabstop=4		" Number of columns of whitespace per tab
set shiftwidth=4	" Number of columns per indent
set softtabstop=4	" Number of columns per tab and space
set expandtab		" Expand tabs to spaces

"" List/Viz of special characters
set list
set listchars=tab:\ \ ,trail:·
"" For mor extended chars, uncomment below
" set showbreak=↪\
" set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨


"" Split management
"" -> Configure splits to behave as I find it more natural
set splitbelow      " New pane will be placed below, with the cursor
set splitright      " New pane will be placed on the right
"" -> Give scrolling some room
if !&scrolloff
  "set scrolloff=3       " Show next 3 lines while scrolling
endif
if !&sidescrolloff
  "set sidescrolloff=5   " Show next 5 columns while side-scrolling
endif
"" Split resizing
set winwidth=105
set winheight=5
set winminheight=5
set winheight=999


"" Spell checking on markdown + completion
autocmd BufRead,BufNewFile *.md setlocal spell
set complete+=kspell


"" Config line numbering
set number
set numberwidth=5
"" Toggle relative numbering, set to absolute on loss of focus or insert mode
set rnu			    " Set relative numbering
                    " To disable type :set nornu or :set rnu!
function! ToggleNumbersOn()
    set nu!
    set rnu
endfunction
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction
 autocmd FocusLost * call ToggleRelativeOn()
 autocmd FocusGained * call ToggleRelativeOn()
 autocmd InsertEnter * call ToggleRelativeOn()
 autocmd InsertLeave * call ToggleRelativeOn()


if has('mouse')
  set mouse=a		" Enable mouse usage (all modes)
endif

"" Set UTF-8
set enc=utf-8
set fileencoding=utf-8

""" FZF:
"" Search down into subfolders
"" Provides tab-completion for all file-related tasks
set path+=**

"" NOW WE CAN:
"" - Hit tab to :find by partial match
"" - Use * to make it fuzzy

"" THINGS TO CONSIDER:
"" - :b lets you autocomplete any open buffer

""" FILE BROWSING:
"" Tweaks for browsing
"let g:netrw_banner=0		" disable annoying banner
"let g:netrw_browse_split=4	" open in prior window
let g:netrw_altv=1		    " open splits to the right
let g:netrw_liststyle=3		" tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.='.DS_Store'
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'


""" TAG JUMPING:
"" Create the `tags` file (may need to install ctags first)
"TODO: Check if `ctags` is installed. If not, install it
command! MakeTags !ctags -R .

"" NOW WE CAN:
"" - Use ^] to jump to tag under cursor
"" - Use g^] for ambiguous tags
"" - Use ^t to jump back up the tag stack

"" THINGS TO CONSIDER:
"" - This doesn't help if you want a visual list of tags


""" SNIPPETS:
"" Example for a snippet being inserted into the current file
"nnoremap <Leader>html :-1read $HOME/.vim/snippets/.skeleton.html<CR>

"" ===========================================================================
""" PLUGINS
"" -> We will use vim-plug to manage plugins!

"" Download vim-plug if missing
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

"" List below which plugins to download
call plug#begin('~/.vim/plugged')

"" Language and filetype specific plugins
"Plug 'cespare/vim-toml'             " Syntax highlighting for TOML | Replaced
"                                    "by `dosini` which does the trick
Plug 'tpope/vim-markdown'           " Enhanced features for MD

"" Integration of other software into vim
" Plug 'editorconfig/editorconfig-vim'

"" Make it good looking 😏
Plug 'notpratheek/vim-luna'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"" Other functionalities
Plug 'tpope/vim-surround'           " Alter surrounding chars: ys, cs, ss
Plug 'tpope/vim-repeat'             " Enable dot operation on plugins
Plug 'tpope/vim-commentary'         " Toggle commenting text: gc, gcc
"" -> Yet to be tested
"Plug 'vimpostor/vim-tpipeline'      " Embed VIM's stat line into tmux

""" MORE PLUGGINS HERE: ~/.vim/plug_rec.vim

call plug#end()

"" ===========================================================================
""" PLUGIN SPECIFIC CONFIGURATION
"" Every configuration starts with the filereadable if-statement to apply
"" these configurations when plugin is installed only

"" To browse to each specific configuration, type `gf` on normal mode with the
"" cursor anywhere on the path string to the file

" Airline   [Extra cute status bar]
if filereadable(glob("~/.vim/plugged/vim-airline/plugin/airline.vim"))
    source ~/.vim/conf/airline.conf.vim
endif

""" COLORS
set background=dark
if filereadable(glob("~/.vim/plugged/vim-luna/colors/luna-term.vim"))
    colorscheme luna-term
else
    colorscheme torte
endif
"" Uncomment the following command for 256 colors
set t_Co=256

""" Markdown
if filereadable(glob("~/.vim/plugged/vim-markdown/ftplugin/markdown.vim"))
    let g:markdown_fenced_languages = ['html', 'python', 'ruby', 'yaml', 'haml', 'bash=sh', 'toml=dosini']
endif

""" EditorConfig
if filereadable(glob("~/.vim/plugged/editorconfig-vim/plugin/editorconfig.vim"))
    Plug 'vim-scripts/PreserveNoEOL'    " Required for editorconfig to work
    let g:EditorConfig_verbose = 0
    let g:EditorConfig_core_mode = 'external_command'
endif

"" ===========================================================================

""" BACKUP CONFIGS
"" Set syntax highlighting for specific file types
 autocmd BufRead,BufNewFile *.md set filetype=markdown

 autocmd BufReadPost *.toml set syntax=dosini
 autocmd BufRead,BufNewFile .flake8 set syntax=dosini
 autocmd BufRead,BufNewFile .gitlint set syntax=dosini
 autocmd BufRead,BufNewFile .darglint set syntax=dosini

 set dictionary+=/usr/share/dict/words

 autocmd BufNewFile,BufRead ~/Documents/mine/pdi/* set nospell
 autocmd BufNewFile,BufRead ~/Documents/mine/pdi/* set noexpandtab
